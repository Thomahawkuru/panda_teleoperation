/* 
 * This message is auto generated by ROS#. Please DO NOT modify.
 * Note:
 * - Comments from the original code will be written in their own line 
 * - Variable sized arrays will be initialized to array of size 0 
 * Please report any issues at 
 * <https://github.com/siemens/ros-sharp> 
 */



using RosSharp.RosBridgeClient.MessageTypes.Std;
using RosSharp.RosBridgeClient.MessageTypes.Franka;

namespace RosSharp.RosBridgeClient.MessageTypes.Franka
{
    public class FrankaState : Message
    {
        public const string RosMessageName = "franka_msgs/FrankaState";

        public Header header { get; set; }
        public double[] cartesian_collision { get; set; }
        public double[] cartesian_contact { get; set; }
        public double[] q { get; set; }
        public double[] q_d { get; set; }
        public double[] dq { get; set; }
        public double[] dq_d { get; set; }
        public double[] ddq_d { get; set; }
        public double[] theta { get; set; }
        public double[] dtheta { get; set; }
        public double[] tau_J { get; set; }
        public double[] dtau_J { get; set; }
        public double[] tau_J_d { get; set; }
        public double[] K_F_ext_hat_K { get; set; }
        public double[] elbow { get; set; }
        public double[] elbow_d { get; set; }
        public double[] elbow_c { get; set; }
        public double[] delbow_c { get; set; }
        public double[] ddelbow_c { get; set; }
        public double[] joint_collision { get; set; }
        public double[] joint_contact { get; set; }
        public double[] O_F_ext_hat_K { get; set; }
        public double[] O_dP_EE_d { get; set; }
        public double[] O_dP_EE_c { get; set; }
        public double[] O_ddP_EE_c { get; set; }
        public double[] tau_ext_hat_filtered { get; set; }
        public double m_ee { get; set; }
        public double[] F_x_Cee { get; set; }
        public double[] I_ee { get; set; }
        public double m_load { get; set; }
        public double[] F_x_Cload { get; set; }
        public double[] I_load { get; set; }
        public double m_total { get; set; }
        public double[] F_x_Ctotal { get; set; }
        public double[] I_total { get; set; }
        public double[] O_T_EE { get; set; }
        public double[] O_T_EE_d { get; set; }
        public double[] O_T_EE_c { get; set; }
        public double[] F_T_EE { get; set; }
        public double[] F_T_NE { get; set; }
        public double[] NE_T_EE { get; set; }
        public double[] EE_T_K { get; set; }
        public double time { get; set; }
        public double control_command_success_rate { get; set; }
        public const byte ROBOT_MODE_OTHER = 0;
        public const byte ROBOT_MODE_IDLE = 1;
        public const byte ROBOT_MODE_MOVE = 2;
        public const byte ROBOT_MODE_GUIDING = 3;
        public const byte ROBOT_MODE_REFLEX = 4;
        public const byte ROBOT_MODE_USER_STOPPED = 5;
        public const byte ROBOT_MODE_AUTOMATIC_ERROR_RECOVERY = 6;
        public byte robot_mode { get; set; }
        public Errors current_errors { get; set; }
        public Errors last_motion_errors { get; set; }

        public FrankaState()
        {
            this.header = new Header();
            this.cartesian_collision = new double[6];
            this.cartesian_contact = new double[6];
            this.q = new double[7];
            this.q_d = new double[7];
            this.dq = new double[7];
            this.dq_d = new double[7];
            this.ddq_d = new double[7];
            this.theta = new double[7];
            this.dtheta = new double[7];
            this.tau_J = new double[7];
            this.dtau_J = new double[7];
            this.tau_J_d = new double[7];
            this.K_F_ext_hat_K = new double[6];
            this.elbow = new double[2];
            this.elbow_d = new double[2];
            this.elbow_c = new double[2];
            this.delbow_c = new double[2];
            this.ddelbow_c = new double[2];
            this.joint_collision = new double[7];
            this.joint_contact = new double[7];
            this.O_F_ext_hat_K = new double[6];
            this.O_dP_EE_d = new double[6];
            this.O_dP_EE_c = new double[6];
            this.O_ddP_EE_c = new double[6];
            this.tau_ext_hat_filtered = new double[7];
            this.m_ee = 0.0;
            this.F_x_Cee = new double[3];
            this.I_ee = new double[9];
            this.m_load = 0.0;
            this.F_x_Cload = new double[3];
            this.I_load = new double[9];
            this.m_total = 0.0;
            this.F_x_Ctotal = new double[3];
            this.I_total = new double[9];
            this.O_T_EE = new double[16];
            this.O_T_EE_d = new double[16];
            this.O_T_EE_c = new double[16];
            this.F_T_EE = new double[16];
            this.F_T_NE = new double[16];
            this.NE_T_EE = new double[16];
            this.EE_T_K = new double[16];
            this.time = 0.0;
            this.control_command_success_rate = 0.0;
            this.robot_mode = 0;
            this.current_errors = new Errors();
            this.last_motion_errors = new Errors();
        }

        public FrankaState(Header header, double[] cartesian_collision, double[] cartesian_contact, double[] q, double[] q_d, double[] dq, double[] dq_d, double[] ddq_d, double[] theta, double[] dtheta, double[] tau_J, double[] dtau_J, double[] tau_J_d, double[] K_F_ext_hat_K, double[] elbow, double[] elbow_d, double[] elbow_c, double[] delbow_c, double[] ddelbow_c, double[] joint_collision, double[] joint_contact, double[] O_F_ext_hat_K, double[] O_dP_EE_d, double[] O_dP_EE_c, double[] O_ddP_EE_c, double[] tau_ext_hat_filtered, double m_ee, double[] F_x_Cee, double[] I_ee, double m_load, double[] F_x_Cload, double[] I_load, double m_total, double[] F_x_Ctotal, double[] I_total, double[] O_T_EE, double[] O_T_EE_d, double[] O_T_EE_c, double[] F_T_EE, double[] F_T_NE, double[] NE_T_EE, double[] EE_T_K, double time, double control_command_success_rate, byte robot_mode, Errors current_errors, Errors last_motion_errors)
        {
            this.header = header;
            this.cartesian_collision = cartesian_collision;
            this.cartesian_contact = cartesian_contact;
            this.q = q;
            this.q_d = q_d;
            this.dq = dq;
            this.dq_d = dq_d;
            this.ddq_d = ddq_d;
            this.theta = theta;
            this.dtheta = dtheta;
            this.tau_J = tau_J;
            this.dtau_J = dtau_J;
            this.tau_J_d = tau_J_d;
            this.K_F_ext_hat_K = K_F_ext_hat_K;
            this.elbow = elbow;
            this.elbow_d = elbow_d;
            this.elbow_c = elbow_c;
            this.delbow_c = delbow_c;
            this.ddelbow_c = ddelbow_c;
            this.joint_collision = joint_collision;
            this.joint_contact = joint_contact;
            this.O_F_ext_hat_K = O_F_ext_hat_K;
            this.O_dP_EE_d = O_dP_EE_d;
            this.O_dP_EE_c = O_dP_EE_c;
            this.O_ddP_EE_c = O_ddP_EE_c;
            this.tau_ext_hat_filtered = tau_ext_hat_filtered;
            this.m_ee = m_ee;
            this.F_x_Cee = F_x_Cee;
            this.I_ee = I_ee;
            this.m_load = m_load;
            this.F_x_Cload = F_x_Cload;
            this.I_load = I_load;
            this.m_total = m_total;
            this.F_x_Ctotal = F_x_Ctotal;
            this.I_total = I_total;
            this.O_T_EE = O_T_EE;
            this.O_T_EE_d = O_T_EE_d;
            this.O_T_EE_c = O_T_EE_c;
            this.F_T_EE = F_T_EE;
            this.F_T_NE = F_T_NE;
            this.NE_T_EE = NE_T_EE;
            this.EE_T_K = EE_T_K;
            this.time = time;
            this.control_command_success_rate = control_command_success_rate;
            this.robot_mode = robot_mode;
            this.current_errors = current_errors;
            this.last_motion_errors = last_motion_errors;
        }
    }
}
